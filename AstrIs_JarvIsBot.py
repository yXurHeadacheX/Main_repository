# –ò–º–ø–æ—Ä—Ç
import telebot
import os
import keyboard
import time
import speech_recognition as sr
from pydub import AudioSegment
import pyautogui
import requests
from google.cloud import speech
import hashlib
from transformers import LlamaTokenizer, LlamaForCausalLM
from torch.optim import Adam
from mistralai import Mistral
import mss
from tabulate import tabulate
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
#______________________________________________________________________
# –¢–æ–∫–µ–Ω—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
MISTRAL_API_TOKEN = os.getenv("mistral_api_token")
PASSWORD_HASH = str(os.getenv("hash_pass"))
MODEL = "mistral-large-latest"
bot = telebot.TeleBot(token=os.getenv("token_jarvis"))
flag = True

#–î–û–ë–ê–í–ò–¢–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –§–û–¢–û, –¢.–ï. –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê –ü–û –§–û–¢–û!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#_______________________________________________________________________
# –°–ª–æ–≤–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏
authorized_users = {}
hotkeys = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    "`", "[", "]", ";", "'", ",", ".", "/",
    "Space", "Ctrl", "Alt", "Shift", "Tab", "Win", "Enter", "Backspace", "Del", "Insert", "Escape",
    "Ctrl+Alt+Del", "Alt+Tab", "Alt+F4", "Alt+F10", "Alt+Shift+F9", "Ctrl+Up", "Ctrl+Down", "Ctrl+Left", "Ctrl+Right",
    "Ctrl+Home", "Ctrl+End", "Ctrl+Page Up", "Ctrl+Page Down", "Ctrl+Tab",
    "Ctrl+1", "Ctrl+2", "Ctrl+3", "Ctrl+4", "Ctrl+5", "Ctrl+6", "Ctrl+7", "Ctrl+8", "Ctrl+9",
    "Ctrl+T", "Ctrl+W"
]
hotkeys_translate = {
    "A": "–§", "B": "–ò", "C": "–°", "D": "–í", "E": "–£", "F": "–ê", "G": "–ü", "H": "–†", "I": "–®", "J": "–û", "K": "–õ",
    "L": "–î", "M": "–¨", "N": "–¢", "O": "–©", "P": "–ó", "Q": "–ô", "R": "–ö", "S": "–´", "T": "–ï", "U": "–ì", "V": "–ú", "W": "–¶", "X": "–ß", "Y": "–ù", "Z": "–Ø",
}
list_apps = [
    [1, "Cyberpunk2077"], [2, "Spotify"], [3, "Telegram"], [4, "Steam"],
    [5, "VsCode"], [6, "–Ø–Ω–¥–µ–∫—Å"], [7, "Bash"], [8, "CS2"],
    [9, "Forza4"], [10, "Poppy3"], [11, "BattleBit"], [12, "Dishonored2"]
]
dict_directory = {
    "cyberpunk2077": r"D:\games\Cyberpunk 2077 v.2.2 (2020)\Cyberpunk 2077\bin\x64\Cyberpunk2077.exe",
    "spotify": r'C:\Users\stakh\AppData\Roaming\Spotify\Spotify.exe',
    "telegram": r"D:\Telegram Desktop\Telegram.exe",
    "steam": r"D:\Steam\steam.exe",
    "vscode": r"C:\Microsoft VS Code\Code.exe",
    "—è–Ω–¥–µ–∫—Å": r"C:\Users\stakh\AppData\Local\Yandex\YandexBrowser\Application\browser.exe",
    "bash": r"C:\Program Files\Git\git-bash.exe",
    "cs2": r"D:\Steam\steamapps\common\Counter-Strike Global Offensive\game\bin\win64\cs2.exe",
    "forza4": r"D:\games\Forza.Horizon.4.Ultimate.Edition.Steam.Rip-InsaneRamZes\ForzaHorizon4\ForzaHorizon4.exe",
    "poppy3": r"D:\realgames\Poppy Playtime Chapter 3\Playtime_Chapter3.exe",
    "battlebit": r"D:\Steam\steamapps\common\BattleBit Remastered\BattleBit.exe",
    "dishonored2": r"D:\realgames\Dishonored 2\Dishonored2.exe"
}
list_keyboard_func = [
    [1, "C(–∞–Ω–≥–ª.) - —É–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"], [2, "B - –ø—Ä–∏–±–∞–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"],
    [3, "D - –≤—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"], [4, "K - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ"],
    [5, "G - –Ω–∞–∂–∞—Ç—å –Ω–∞ –ø–∞—É–∑—É –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å"], [6, "Q - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å"],
    [7, "P - —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å"]
]
#_____________________________________________________________________________________________
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_keyboard(): # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.row(KeyboardButton('üì± –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π'), KeyboardButton('üñ• –°–∫—Ä–∏–Ω—à–æ—Ç'))
    keyboard.row(KeyboardButton('‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞'), KeyboardButton('üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–º'))
    return keyboard
def generate_response(user_id, user_input): # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Mistral
    try:
        client = Mistral(api_key=MISTRAL_API_TOKEN)
        full_response = ""
        stream_response = client.chat.stream(
            model=MODEL,
            messages=[
                {
                    "role": "user",
                    "content": user_input,
                }
            ]
        )
        for chunk in stream_response:
            if chunk.data.choices[0].delta.content:
                full_response += chunk.data.choices[0].delta.content
        if not full_response:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
        return full_response
    except Exception as e:
        print(f"Error generating response: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

def check_password(message): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    user_id = message.from_user.id
    entered_password = message.text.strip()
    hashed_password = hashlib.sha256(entered_password.encode()).hexdigest()
    if user_id in authorized_users and authorized_users[user_id]:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.".format(user_id))
        return True
    if hashed_password == PASSWORD_HASH:
        authorized_users[user_id] = True
        bot.reply_to(message, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
        bot.delete_message(user_id, message.message_id)
        bot.send_message("5555053905", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.")
        return True
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
        return False

#_____________________________________________________________________________________________
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start']) # –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
def start_message(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_keyboard())

@bot.message_handler(commands=['apps']) # –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
def ListAppsForStart(message):
    if check_password(message):
        keyboard = InlineKeyboardMarkup()
        for app in list_apps:
            keyboard.add(InlineKeyboardButton(app[1], callback_data=f"start_app_{app[1].lower()}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('start_app_')) # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def callback_start_app(call):
    app_name = call.data.split('_')[2]
    if app_name in dict_directory:
        os.startfile(dict_directory[app_name])
        bot.answer_callback_query(call.id, f"–ó–∞–ø—É—Å–∫–∞—é {app_name}")
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")

@bot.message_handler(commands=["keyboard"]) # –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è
def AnsKey_en(message):
    if check_password(message):
        keyboard = InlineKeyboardMarkup()
        for key in hotkeys:
            keyboard.add(InlineKeyboardButton(key, callback_data=f"hotkey_{key.lower()}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ hotkey:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('hotkey_')) # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è hotkey
def callback_hotkey_en(call):
    key = call.data.split('_')[1]
    try:
        keyboard.send(key)
        bot.answer_callback_query(call.id, f"–ö–ª–∞–≤–∏—à–∞ {key.upper()} –Ω–∞–∂–∞—Ç–∞")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=["writetxt"])
def Itxt(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞:")
        bot.register_next_step_handler(message, confirm_text_input)

def confirm_text_input(message):
    text = message.text
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_text_{text}"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_text")
    )
    bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç: {text}", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_text_') or call.data == 'cancel_text')
def callback_text_input(call):
    if call.data == 'cancel_text':
        bot.answer_callback_query(call.id, "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        text = call.data.split('confirm_text_')[1]
        try:
            keyboard.write(text)
            bot.answer_callback_query(call.id, f"–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω: {text}")
            bot.edit_message_text(f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω: {text}", call.message.chat.id, call.message.message_id)
        except Exception as e:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
            bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}", call.message.chat.id, call.message.message_id)

@bot.message_handler(commands=["sendsctpart"])
def AnsSctPart(message):
    if check_password(message):
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("300x200", callback_data="sct_300x200"),
                     InlineKeyboardButton("500x300", callback_data="sct_500x300"))
        keyboard.row(InlineKeyboardButton("800x600", callback_data="sct_800x600"),
                     InlineKeyboardButton("1024x768", callback_data="sct_1024x768"))
        keyboard.row(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="sct_custom"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('sct_'))
def callback_sct(call):
    if call.data == 'sct_custom':
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 300):")
        bot.register_next_step_handler(call.message, process_custom_size)
    else:
        width, height = map(int, call.data.split('_')[1].split('x'))
        send_screenshot(call.message, width, height)

def process_custom_size(message):
    try:
        width, height = map(int, message.text.split())
        send_screenshot(message, width, height)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.")

def send_screenshot(message, width, height):
    try:
        with mss.mss() as sct:
            monitor = {"top": 200, "left": 300, "width": width, "height": height}
            output = f"sct-{monitor['top']}x{monitor['left']}_{monitor['width']}x{monitor['height']}.png"
            sct_img = sct.grab(monitor)
            mss.tools.to_png(sct_img.rgb, sct_img.size, output=output)
        with open(output, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
        os.remove(output)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

@bot.message_handler(commands=["sendsctfull"])
def SendSctFull(message):
    if check_password(message):
        with mss.mss() as sct:
            screen = sct.shot(mon=-1, output='fullscreen.jpg')
            bot.send_photo(message.chat.id, open("fullscreen.jpg", "rb"))
            os.remove("fullscreen.jpg")

@bot.message_handler(commands=['offgenerate'])
def off_generate(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
        global flag
        flag = False

@bot.message_handler(commands=['ongenerate'])
def on_generate(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω")
        global flag
        flag = True

@bot.message_handler(commands=['logout'])
def logout(message):
    if check_password(message):
        user_id = message.from_user.id
        if user_id in authorized_users:
            del authorized_users[user_id]
        bot.reply_to(message, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")

@bot.message_handler(commands=["manykeyboard"]) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
def AnsKeyMany(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ hotkey, –∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∫–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π")
        bot.register_next_step_handler(message, SendKeysMany)

def SendKeysMany(message): # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
    try:
        for i in range(int(message.text.lower().split(' ')[1])):
            keyboard.send(message.text.lower().split(' ')[0])
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\
            {e}")

@bot.message_handler(commands=["holdauto"]) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
def AnsHoldAuto(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ hotkey –¥–ª—è –∑–∞–∂–∞—Ç–∏—è, –∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏—à—É, –∞ —á–µ—Ä–µ–∑ –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –∫–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π –≤—Ç–æ—Ä–æ–π –∫–ª–∞–≤–∏—à–∏")
        bot.register_next_step_handler(message, PressHoldAuto)

def PressHoldAuto(message): # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
    try:
        keyboard.press(message.text.lower().split(' ')[0])
        for i in range(int(message.text.lower().split(' ')[2])):
            keyboard.send(message.text.lower().split(' ')[1])
        keyboard.release(message.text.lower().split(' ')[0])
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\
            {e}")

@bot.message_handler(commands=["holdinput"]) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –≤—Ä—É—á–Ω—É—é
def AnsHold(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ hotkey –¥–ª—è –∑–∞–∂–∞—Ç–∏—è, –∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤—Ç–æ—Ä—É—é –∫–ª–∞–≤–∏—à—É\n\
            –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É–∂–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫—É, –ø–∏—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—ã–ª–æ –∑–∞–∂–∞—Ç—å, –∞ –∑–∞—Ç–µ–º stop")
        bot.register_next_step_handler(message, PressHold)
def PressHold(message): # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –≤—Ä—É—á–Ω—É—é
    try:
        keyboard.press(message.text.lower().split(" ")[0])
        if message.text.lower().split(' ')[1] != "stop":
            keyboard.send(message.text.lower().split(" ")[1])
            time.sleep(0.6)
            with mss.mss() as sct:
                screen = sct.shot(mon=-1, output='fullscreen.jpg')
                bot.send_photo(message.chat.id, open("fullscreen.jpg", "rb"))
                os.remove("fullscreen.jpg")
            bot.register_message_reaction_handler(message, AnsHold(message))
        else:
            keyboard.release(message.text.lower().split(" ")[0])
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\
            {e}")

@bot.message_handler(commands=['cursor']) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
def handle_cursor_command(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: cursor(–∫—É—Ä—Å–æ—Ä) [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")
        bot.register_next_step_handler(message, input_cursor_position)

def input_cursor_position(message): # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    command = message.text.lower.strip()
    parts = command.split()
    if len(parts) >= 3:
        direction = parts[1]
        try:
            distance = int(parts[2])
            if direction == "–≤–≤–µ—Ä—Ö":
                pyautogui.moveRel(0, -distance)
            elif direction == "–≤–Ω–∏–∑":
                pyautogui.moveRel(0, distance)
            elif direction == "–≤–ª–µ–≤–æ":
                pyautogui.moveRel(-distance, 0)
            elif direction == "–≤–ø—Ä–∞–≤–æ":
                pyautogui.moveRel(distance, 0)
            elif direction == "click" or direction == "–∫–ª–∏–∫":
                pyautogui.click()
            elif direction == "–¥–≤–æ–π–Ω–æ–π":
                pyautogui.doubleClick()
            else:
                bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ, –∫–ª–∏–∫ –∏–ª–∏ –¥–≤–æ–π–Ω–æ–π.")
                return
            bot.reply_to(message, f"–ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ {distance} –ø–∏–∫—Å–µ–ª–µ–π {direction}")
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")

@bot.message_handler(content_types=['voice']) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_voice(message):
    if check_password(message):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            file_info = bot.get_file(message.voice.file_id)
            file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(file_url)
            with open('voice_message.ogg', 'wb') as f:
                f.write(response.content)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ogg –≤ .wav
            audio = AudioSegment.from_ogg("voice_message.ogg")
            audio.export("voice_message.wav", format="wav")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
            r = sr.Recognizer()

            # –°–ø–∏—Å–æ–∫ –¥–≤–∏–∂–∫–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            engines = ['google', 'sphinx', 'google_cloud']

            recognized_text = None

            for engine in engines:
                try:
                    with sr.AudioFile("voice_message.wav") as source:
                        audio_data = r.record(source)
                        if engine == 'google':
                            recognized_text = r.recognize_google(audio_data, language="ru-RU")
                        elif engine == 'sphinx':
                            recognized_text = r.recognize_sphinx(audio_data, language="ru-RU")
                        elif engine == 'google_cloud':
                            client = speech.SpeechClient()
                            audio = speech.RecognitionAudio(content=audio_data.get_raw_data())
                            config = speech.RecognitionConfig(
                                encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
                                sample_rate_hertz=16000,
                                language_code="ru-RU",
                            )
                            response = client.recognize(config=config, audio=audio)
                            recognized_text = response.results[0].alternatives[0].transcript
                        if recognized_text:
                            break
                except sr.UnknownValueError:
                    continue
                except sr.RequestError:
                    continue
            if recognized_text:
                bot.reply_to(message, f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {recognized_text}")
                process_command(message, recognized_text)
            else:
                bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove("voice_message.ogg")
            os.remove("voice_message.wav")
        except Exception as e:
            bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

def process_command(message, command): # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–∞–Ω–¥
    command = command.lower()
    user_id = message.from_user.id
    if "–∞—Å—Ç—Ä–∏—Å" in command: # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ê—Å—Ç—Ä–∏—Å–∞
        context = command.split("–∞—Å—Ç—Ä–∏—Å", 1)[1].strip()
        response = generate_response(user_id, context)
        bot.send_message(message.chat.id, response)
    elif "–∑–∞–ø—É—Å—Ç–∏" in command: # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_name = command.split("–∑–∞–ø—É—Å—Ç–∏")[-1].strip()
        if app_name in dict_directory:
            os.startfile(dict_directory[app_name])
            bot.reply_to(message, f"–ó–∞–ø—É—Å–∫–∞—é {app_name}")
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∏–º–µ–Ω–µ–º {app_name}")
    elif "–∫—É—Ä—Å–æ—Ä" in command or "cursor" in command: # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
        parts = command.split()
        if len(parts) >= 3:
            direction = parts[1]
            try:
                distance = int(parts[2])
                if direction == "–≤–≤–µ—Ä—Ö":
                    pyautogui.moveRel(0, -distance)
                elif direction == "–≤–Ω–∏–∑":
                    pyautogui.moveRel(0, distance)
                elif direction == "–≤–ª–µ–≤–æ":
                    pyautogui.moveRel(-distance, 0)
                elif direction == "–≤–ø—Ä–∞–≤–æ":
                    pyautogui.moveRel(distance, 0)
                elif direction == "click":
                    pyautogui.click()
                elif direction == "–¥–≤–æ–π–Ω–æ–π":
                    pyautogui.doubleClick()
                else:
                    bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ, –∫–ª–∏–∫ –∏–ª–∏ –¥–≤–æ–π–Ω–æ–π.")
                    return
                bot.reply_to(message, f"–ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ {distance} –ø–∏–∫—Å–µ–ª–µ–π {direction}")
            except ValueError:
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")
        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")
    elif "—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" in command: # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        ListAppsForStart(message)
    elif "–∫–ª–∞–≤–∏—à–∞" in command: # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
        key = command.split("–∫–ª–∞–≤–∏—à–∞")[-1].strip()
        try:
            keyboard.send(key)
            bot.reply_to(message, f"–ù–∞–∂–∏–º–∞—é –∫–ª–∞–≤–∏—à—É {key}")
        except:
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É {key}")
    elif "–Ω–∞–ø–∏—à–∏" in command: # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        text = command.split("–Ω–∞–ø–∏—à–∏")[-1].strip()
        try:
            keyboard.write(text)
            bot.reply_to(message, f"–í–≤–æ–∂—É —Ç–µ–∫—Å—Ç: {text}")
        except:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
    elif "—Å–∫—Ä–∏–Ω—à–æ—Ç" in command: # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        SendSctFull(message)
    elif "–∑–∞–∂–º–∏" in command: # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
        parts = command.split()
        if len(parts) >= 4 and parts[2] == "–Ω–∞–∂–º–∏":
            key1 = parts[1]
            if key1 == "–∞–ª—å—Ç": key1 = "alt"
            key2 = parts[3]
            count = int(parts[4]) if len(parts) > 4 else 1
            try:
                keyboard.press(key1)
                for _ in range(count):
                    keyboard.send(key2)
                keyboard.release(key1)
                bot.reply_to(message, f"–ó–∞–∂–∏–º–∞—é {key1}, –Ω–∞–∂–∏–º–∞—é {key2} {count} —Ä–∞–∑(–∞)")
            except:
                bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
        else:
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞–∂–º–∏ [–∫–ª–∞–≤–∏—à–∞1] –Ω–∞–∂–º–∏ [–∫–ª–∞–≤–∏—à–∞2] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
    else:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

@bot.message_handler(func=lambda message: True) # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_text(message):
    entered_password = message.text.strip()
    hashed_password = hashlib.sha256(entered_password.encode()).hexdigest()
    if check_password(message):
        user_id = message.from_user.id
        user_input = message.text.strip()
        if user_input and hashed_password != PASSWORD_HASH:
            response = generate_response(user_id, user_input)
            if user_input == 'üì± –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π':
                ListAppsForStart(message)
            elif user_input == 'üñ• –°–∫—Ä–∏–Ω—à–æ—Ç':
                SendSctFull(message)
            elif user_input == 'üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–º':
                handle_cursor_command(message)
            elif user_input == '‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞':
                Itxt(message)
            else:
                if flag == True:
                    if response:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                        bot.send_message(message.chat.id, response)
                    else:
                        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")
                else:
                    bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω.")
#___________________________________________________________________________________________________
#–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as _ex:
            print(_ex)
            time.sleep(15)
