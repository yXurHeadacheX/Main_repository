# –ò–º–ø–æ—Ä—Ç
import telebot
import os
import keyboard
import time
import speech_recognition as sr
from pydub import AudioSegment
import pyautogui
import requests
from google.cloud import speech
import hashlib
from transformers import LlamaTokenizer, LlamaForCausalLM
from torch.optim import Adam
from mistralai import Mistral
import mss
from tabulate import tabulate
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import psutil
import platform
from datetime import datetime
import subprocess
import winreg as reg
import ctypes, sys
from PIL import Image
import io
from transformers import AutoImageProcessor, ResNetForImageClassification
import torch
from urllib.request import urlopen
import pytesseract
#______________________________________________________________________
# –¢–æ–∫–µ–Ω—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
MISTRAL_API_TOKEN = os.getenv("mistral_api_token")
PASSWORD_HASH = str(os.getenv("hash_pass"))
MODEL = "mistral-large-latest"
bot = telebot.TeleBot(token=os.getenv("token_jarvis"))

#–î–û–ë–ê–í–ò–¢–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –§–û–¢–û, –¢.–ï. –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê –ü–û –§–û–¢–û!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#_______________________________________________________________________
# –°–ª–æ–≤–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏
authorized_users = {}
hotkeys = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    "`", "[", "]", ";", "'", ",", ".", "/",
    "Space", "Ctrl", "Alt", "Shift", "Tab", "Win", "Enter", "Backspace", "Del", "Insert", "Escape",
    "Up", "Down", "Left", "Right",
    "Ctrl+Alt+Del", "Alt+Tab", "Alt+F4", "Alt+F10", "Alt+Shift+F9", "Ctrl+Up", "Ctrl+Down", "Ctrl+Left", "Ctrl+Right",
    "Ctrl+Home", "Ctrl+End", "Ctrl+Page Up", "Ctrl+Page Down", "Ctrl+Tab",
    "Ctrl+1", "Ctrl+2", "Ctrl+3", "Ctrl+4", "Ctrl+5", "Ctrl+6", "Ctrl+7", "Ctrl+8", "Ctrl+9",
    "Ctrl+T", "Ctrl+W"
]
hotkeys_translate = {
    "A": "–§", "B": "–ò", "C": "–°", "D": "–í", "E": "–£", "F": "–ê", "G": "–ü", "H": "–†", "I": "–®", "J": "–û", "K": "–õ",
    "L": "–î", "M": "–¨", "N": "–¢", "O": "–©", "P": "–ó", "Q": "–ô", "R": "–ö", "S": "–´", "T": "–ï", "U": "–ì", "V": "–ú", "W": "–¶", "X": "–ß", "Y": "–ù", "Z": "–Ø",
}
list_apps = [
    [1, "Cyberpunk2077"], [2, "Spotify"], [3, "Telegram"], [4, "Steam"],
    [5, "VsCode"], [6, "–Ø–Ω–¥–µ–∫—Å"], [7, "Bash"], [8, "CS2"],
    [9, "Forza4"], [10, "Poppy3"], [11, "BattleBit"], [12, "Dishonored2"]
]
dict_directory = {
    "cyberpunk2077": r"D:\games\Cyberpunk 2077 v.2.2 (2020)\Cyberpunk 2077\bin\x64\Cyberpunk2077.exe",
    "spotify": r'C:\Users\stakh\AppData\Roaming\Spotify\Spotify.exe',
    "telegram": r"D:\Telegram Desktop\Telegram.exe",
    "steam": r"D:\Steam\steam.exe",
    "vscode": r"C:\Microsoft VS Code\Code.exe",
    "—è–Ω–¥–µ–∫—Å": r"C:\Users\stakh\AppData\Local\Yandex\YandexBrowser\Application\browser.exe",
    "bash": r"C:\Program Files\Git\git-bash.exe",
    "cs2": r"D:\Steam\steamapps\common\Counter-Strike Global Offensive\game\bin\win64\cs2.exe",
    "forza4": r"D:\games\Forza.Horizon.4.Ultimate.Edition.Steam.Rip-InsaneRamZes\ForzaHorizon4\ForzaHorizon4.exe",
    "poppy3": r"D:\realgames\Poppy Playtime Chapter 3\Playtime_Chapter3.exe",
    "battlebit": r"D:\Steam\steamapps\common\BattleBit Remastered\BattleBit.exe",
    "dishonored2": r"D:\realgames\Dishonored 2\Dishonored2.exe"
}
list_keyboard_func = [
    [1, "C(–∞–Ω–≥–ª.) - —É–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"], [2, "B - –ø—Ä–∏–±–∞–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"],
    [3, "D - –≤—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"], [4, "K - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ"],
    [5, "G - –Ω–∞–∂–∞—Ç—å –Ω–∞ –ø–∞—É–∑—É –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å"], [6, "Q - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å"],
    [7, "P - —Å–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å"]
]
#_____________________________________________________________________________________________
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_keyboard(): # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.row(KeyboardButton('üì± –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π'), KeyboardButton('üñ• –°–∫—Ä–∏–Ω—à–æ—Ç'))
    keyboard.row(KeyboardButton('‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞'), KeyboardButton('üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–º'))
    keyboard.row(KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã'), KeyboardButton('üì∂ Bluetooth'))
    keyboard.row(KeyboardButton('üìã –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã'))
    return keyboard
def generate_response(user_id, user_input): # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Mistral
    try:
        client = Mistral(api_key=MISTRAL_API_TOKEN)
        full_response = ""
        stream_response = client.chat.stream(
            model=MODEL,
            messages=[
                {
                    "role": "user",
                    "content": user_input,
                }
            ]
        )
        for chunk in stream_response:
            if chunk.data.choices[0].delta.content:
                full_response += chunk.data.choices[0].delta.content
        if not full_response:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
        return full_response
    except Exception as e:
        print(f"Error generating response: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

def check_password(message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if user_id in authorized_users and authorized_users[user_id]:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.".format(user_id))
        return True

    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if hasattr(message, 'text') and message.text:
        entered_password = message.text.strip()
        hashed_password = hashlib.sha256(entered_password.encode()).hexdigest()
        if hashed_password == PASSWORD_HASH:
            authorized_users[user_id] = True
            bot.reply_to(message, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
            bot.delete_message(user_id, message.message_id)
            bot.send_message("5555053905", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.")
            return True

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if user_id not in authorized_users or not authorized_users[user_id]:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
        return False

    return False

#_____________________________________________________________________________________________
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start']) # –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
def start_message(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_keyboard())

@bot.message_handler(commands=['apps']) # –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
def ListAppsForStart(message):
    if check_password(message):
        keyboard = InlineKeyboardMarkup()
        for app in list_apps:
            keyboard.add(InlineKeyboardButton(app[1], callback_data=f"start_app_{app[1].lower()}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('start_app_')) # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def callback_start_app(call):
    app_name = call.data.split('_')[2]
    if app_name in dict_directory:
        os.startfile(dict_directory[app_name])
        bot.answer_callback_query(call.id, f"–ó–∞–ø—É—Å–∫–∞—é {app_name}")
    else:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")

@bot.message_handler(commands=["keyboard"]) # –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è
def AnsKey_en(message):
    if check_password(message):
        keyboard = InlineKeyboardMarkup()
        for key in hotkeys:
            keyboard.add(InlineKeyboardButton(key, callback_data=f"hotkey_{key.lower()}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ hotkey:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('hotkey_')) # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è hotkey
def callback_hotkey_en(call):
    key = call.data.split('_')[1]
    try:
        keyboard.send(key)
        bot.answer_callback_query(call.id, f"–ö–ª–∞–≤–∏—à–∞ {key.upper()} –Ω–∞–∂–∞—Ç–∞")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=["writetxt"])
def Itxt(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞:")
        bot.register_next_step_handler(message, confirm_text_input)

def confirm_text_input(message):
    text = message.text
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_text_{text}"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_text")
    )
    bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç: {text}", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_text_') or call.data == 'cancel_text')
def callback_text_input(call):
    if call.data == 'cancel_text':
        bot.answer_callback_query(call.id, "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        text = call.data.split('confirm_text_')[1]
        try:
            keyboard.write(text)
            bot.answer_callback_query(call.id, f"–¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω: {text}")
            bot.edit_message_text(f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω: {text}", call.message.chat.id, call.message.message_id)
        except Exception as e:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
            bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}", call.message.chat.id, call.message.message_id)

@bot.message_handler(commands=["sendsctpart"])
def AnsSctPart(message):
    if check_password(message):
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("300x200", callback_data="sct_300x200"),
                     InlineKeyboardButton("500x300", callback_data="sct_500x300"))
        keyboard.row(InlineKeyboardButton("800x600", callback_data="sct_800x600"),
                     InlineKeyboardButton("1024x768", callback_data="sct_1024x768"))
        keyboard.row(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="sct_custom"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('sct_'))
def callback_sct(call):
    if call.data == 'sct_custom':
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 300):")
        bot.register_next_step_handler(call.message, process_custom_size)
    else:
        width, height = map(int, call.data.split('_')[1].split('x'))
        send_screenshot(call.message, width, height)

def process_custom_size(message):
    try:
        width, height = map(int, message.text.split())
        send_screenshot(message, width, height)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.")

def send_screenshot(message, width, height):
    try:
        with mss.mss() as sct:
            monitor = {"top": 200, "left": 300, "width": width, "height": height}
            output = f"sct-{monitor['top']}x{monitor['left']}_{monitor['width']}x{monitor['height']}.png"
            sct_img = sct.grab(monitor)
            mss.tools.to_png(sct_img.rgb, sct_img.size, output=output)
        with open(output, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
        os.remove(output)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

@bot.message_handler(commands=["sendsctfull"])
def SendSctFull(message):
    if check_password(message):
        with mss.mss() as sct:
            screen = sct.shot(mon=-1, output='fullscreen.jpg')
            bot.send_photo(message.chat.id, open("fullscreen.jpg", "rb"))
            os.remove("fullscreen.jpg")

@bot.message_handler(commands=['offgenerate'])
def off_generate(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
        global flag
        flag = False

@bot.message_handler(commands=['ongenerate'])
def on_generate(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω")
        global flag
        flag = True

@bot.message_handler(commands=['logout'])
def logout(message):
    if check_password(message):
        user_id = message.from_user.id
        if user_id in authorized_users:
            del authorized_users[user_id]
        bot.reply_to(message, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")

@bot.message_handler(commands=["manykeyboard"]) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
def AnsKeyMany(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ hotkey, –∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∫–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π")
        bot.register_next_step_handler(message, SendKeysMany)

def SendKeysMany(message): # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
    try:
        for i in range(int(message.text.lower().split(' ')[1])):
            keyboard.send(message.text.lower().split(' ')[0])
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\
            {e}")

@bot.message_handler(commands=["holdauto"]) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
def AnsHoldAuto(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ hotkey –¥–ª—è –∑–∞–∂–∞—Ç–∏—è, –∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥—Ä—É–≥—É—é –∫–ª–∞–≤–∏—à—É, –∞ —á–µ—Ä–µ–∑ –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –∫–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π –≤—Ç–æ—Ä–æ–π –∫–ª–∞–≤–∏—à–∏")
        bot.register_next_step_handler(message, PressHoldAuto)

def PressHoldAuto(message): # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
    try:
        keyboard.press(message.text.lower().split(' ')[0])
        for i in range(int(message.text.lower().split(' ')[2])):
            keyboard.send(message.text.lower().split(' ')[1])
        keyboard.release(message.text.lower().split(' ')[0])
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\
            {e}")

@bot.message_handler(commands=["holdinput"]) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –≤—Ä—É—á–Ω—É—é
def AnsHold(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ hotkey –¥–ª—è –∑–∞–∂–∞—Ç–∏—è, –∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤—Ç–æ—Ä—É—é –∫–ª–∞–≤–∏—à—É\n\
            –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É–∂–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –∫–Ω–æ–ø–∫—É, –ø–∏—à–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—ã–ª–æ –∑–∞–∂–∞—Ç—å, –∞ –∑–∞—Ç–µ–º stop")
        bot.register_next_step_handler(message, PressHold)
def PressHold(message): # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ –≤—Ä—É—á–Ω—É—é
    try:
        keyboard.press(message.text.lower().split(" ")[0])
        if message.text.lower().split(' ')[1] != "stop":
            keyboard.send(message.text.lower().split(" ")[1])
            time.sleep(0.6)
            with mss.mss() as sct:
                screen = sct.shot(mon=-1, output='fullscreen.jpg')
                bot.send_photo(message.chat.id, open("fullscreen.jpg", "rb"))
                os.remove("fullscreen.jpg")
            bot.register_message_reaction_handler(message, AnsHold(message))
        else:
            keyboard.release(message.text.lower().split(" ")[0])
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ:\
            {e}")

@bot.message_handler(commands=['cursor']) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
def handle_cursor_command(message):
    if check_password(message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: cursor(–∫—É—Ä—Å–æ—Ä) [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")
        bot.register_next_step_handler(message, input_cursor_position)

def input_cursor_position(message): # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    command = message.text.lower.strip()
    parts = command.split()
    if len(parts) >= 3:
        direction = parts[1]
        try:
            distance = int(parts[2])
            if direction == "–≤–≤–µ—Ä—Ö":
                pyautogui.moveRel(0, -distance)
            elif direction == "–≤–Ω–∏–∑":
                pyautogui.moveRel(0, distance)
            elif direction == "–≤–ª–µ–≤–æ":
                pyautogui.moveRel(-distance, 0)
            elif direction == "–≤–ø—Ä–∞–≤–æ":
                pyautogui.moveRel(distance, 0)
            elif direction == "click" or direction == "–∫–ª–∏–∫":
                pyautogui.click()
            elif direction == "–¥–≤–æ–π–Ω–æ–π":
                pyautogui.doubleClick()
            else:
                bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ, –∫–ª–∏–∫ –∏–ª–∏ –¥–≤–æ–π–Ω–æ–π.")
                return
            bot.reply_to(message, f"–ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ {distance} –ø–∏–∫—Å–µ–ª–µ–π {direction}")
        except ValueError:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")
    else:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")

@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    user_id = message.from_user.id
    voice_ogg = "temp_voice.ogg"
    voice_wav = "temp_voice.wav"

    try:
        if user_id not in authorized_users or not authorized_users[user_id]:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø–∞—Ä–æ–ª—å.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        file_info = bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = requests.get(file_url)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(voice_ogg, 'wb') as f:
            f.write(response.content)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        audio = AudioSegment.from_ogg(voice_ogg)
        audio.export(voice_wav, format="wav")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
        recognizer = sr.Recognizer()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        recognizer.dynamic_energy_threshold = True
        recognizer.energy_threshold = 4000

        recognized_text = None

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–≤–∏–∂–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        with sr.AudioFile(voice_wav) as source:
            audio_data = recognizer.record(source)

            # –ü—Ä–æ–±—É–µ–º Google Speech Recognition
            try:
                recognized_text = recognizer.recognize_google(audio_data, language="ru-RU")
                bot.reply_to(message, f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —á–µ—Ä–µ–∑ Google: {recognized_text}")
            except sr.UnknownValueError:
                try:
                    # –ü—Ä–æ–±—É–µ–º Sphinx –µ—Å–ª–∏ Google –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    recognized_text = recognizer.recognize_sphinx(audio_data, language="ru-RU")
                    bot.reply_to(message, f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —á–µ—Ä–µ–∑ Sphinx: {recognized_text}")
                except:
                    try:
                        # –ü—Ä–æ–±—É–µ–º Google Cloud –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                        client = speech.SpeechClient()
                        audio = speech.RecognitionAudio(content=audio_data.get_raw_data())
                        config = speech.RecognitionConfig(
                            encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
                            sample_rate_hertz=16000,
                            language_code="ru-RU",
                        )
                        response = client.recognize(config=config, audio=audio)
                        if response.results:
                            recognized_text = response.results[0].alternatives[0].transcript
                            bot.reply_to(message, f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —á–µ—Ä–µ–∑ Google Cloud: {recognized_text}")
                    except Exception as e:
                        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Google Cloud: {str(e)}")
            except sr.RequestError as e:
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {str(e)}")
            except Exception as e:
                bot.reply_to(message, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        if recognized_text:
            process_command(message, recognized_text)
        else:
            bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for temp_file in [voice_ogg, voice_wav]:
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_file}: {str(e)}")

def process_command(message, command):
    if not command:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
        return

    command = command.lower().strip()
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ "–∞—Å—Ç—Ä–∏—Å" - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if command.startswith("–∞—Å—Ç—Ä–∏—Å"):
        context = command.split("–∞—Å—Ç—Ä–∏—Å", 1)[1].strip()
        response = generate_response(user_id, context)
        bot.send_message(message.chat.id, response)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if "–∑–∞–ø—É—Å—Ç–∏" in command:
        app_name = command.split("–∑–∞–ø—É—Å—Ç–∏")[-1].strip().lower()
        if app_name in dict_directory:
            os.startfile(dict_directory[app_name])
            bot.reply_to(message, f"–ó–∞–ø—É—Å–∫–∞—é {app_name}")
        else:
            bot.reply_to(message, f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {app_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")

    elif "–∫—É—Ä—Å–æ—Ä" in command:
        parts = command.split()
        if len(parts) >= 3:
            direction = parts[1]
            try:
                distance = int(parts[2])
                if direction == "–≤–≤–µ—Ä—Ö":
                    pyautogui.moveRel(0, -distance)
                elif direction == "–≤–Ω–∏–∑":
                    pyautogui.moveRel(0, distance)
                elif direction == "–≤–ª–µ–≤–æ":
                    pyautogui.moveRel(-distance, 0)
                elif direction == "–≤–ø—Ä–∞–≤–æ":
                    pyautogui.moveRel(distance, 0)
                elif direction in ["–∫–ª–∏–∫", "click"]:
                    pyautogui.click()
                elif direction == "–¥–≤–æ–π–Ω–æ–π":
                    pyautogui.doubleClick()
                else:
                    bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ, –∫–ª–∏–∫ –∏–ª–∏ –¥–≤–æ–π–Ω–æ–π.")
                    return
                bot.reply_to(message, f"–ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ {distance} –ø–∏–∫—Å–µ–ª–µ–π {direction}")
            except ValueError:
                bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")
        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]")

    elif "—Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" in command:
        keyboard = InlineKeyboardMarkup()
        for app in list_apps:
            keyboard.add(InlineKeyboardButton(app[1], callback_data=f"start_app_{app[1].lower()}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

    elif "–∫–ª–∞–≤–∏—à–∞" in command:
        key = command.split("–∫–ª–∞–≤–∏—à–∞")[-1].strip()
        try:
            keyboard.send(key)
            bot.reply_to(message, f"–ù–∞–∂–∏–º–∞—é –∫–ª–∞–≤–∏—à—É {key}")
        except Exception as e:
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–ª–∞–≤–∏—à—É {key}: {str(e)}")

    elif "–Ω–∞–ø–∏—à–∏" in command:
        text = command.split("–Ω–∞–ø–∏—à–∏")[-1].strip()
        try:
            keyboard.write(text)
            bot.reply_to(message, f"–í–≤–æ–∂—É —Ç–µ–∫—Å—Ç: {text}")
        except Exception as e:
            bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç: {str(e)}")

    elif "—Å–∫—Ä–∏–Ω—à–æ—Ç" in command:
        try:
            with mss.mss() as sct:
                screen = sct.shot(mon=-1, output='fullscreen.jpg')
                bot.send_photo(message.chat.id, open("fullscreen.jpg", "rb"))
                os.remove("fullscreen.jpg")
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")

    elif "–∑–∞–∂–º–∏" in command:
        parts = command.split()
        if len(parts) >= 4 and parts[2] == "–Ω–∞–∂–º–∏":
            key1 = parts[1]
            if key1 == "–∞–ª—å—Ç": key1 = "alt"
            key2 = parts[3]
            count = int(parts[4]) if len(parts) > 4 else 1
            try:
                keyboard.press(key1)
                for _ in range(count):
                    keyboard.send(key2)
                keyboard.release(key1)
                bot.reply_to(message, f"–ó–∞–∂–∏–º–∞—é {key1}, –Ω–∞–∂–∏–º–∞—é {key2} {count} —Ä–∞–∑(–∞)")
            except Exception as e:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {str(e)}")
        else:
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞–∂–º–∏ [–∫–ª–∞–≤–∏—à–∞1] –Ω–∞–∂–º–∏ [–∫–ª–∞–≤–∏—à–∞2] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")

    elif "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in command:
        send_system_stats(message)

    elif "bluetooth" in command.lower():
        if "–≤–∫–ª—é—á–∏" in command.lower() or "–≤–∫–ª—é—á–∏—Ç—å" in command.lower():
            result = toggle_bluetooth(True)
            if result is True:
                bot.reply_to(message, "Bluetooth –≤–∫–ª—é—á–µ–Ω")
            else:
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ Bluetooth: {result}")
        elif "–≤—ã–∫–ª—é—á–∏" in command.lower() or "–≤—ã–∫–ª—é—á–∏—Ç—å" in command.lower():
            result = toggle_bluetooth(False)
            if result is True:
                bot.reply_to(message, "Bluetooth –≤—ã–∫–ª—é—á–µ–Ω")
            else:
                bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ Bluetooth: {result}")
        else:
            status = get_bluetooth_status()
            if status is not None:
                bot.reply_to(message, f"Bluetooth {'–≤–∫–ª—é—á–µ–Ω' if status else '–≤—ã–∫–ª—é—á–µ–Ω'}")
            else:
                bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Bluetooth")

    elif "–ø—Ä–æ—Ü–µ—Å—Å—ã" in command or "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" in command:
        show_running_processes(message)

    elif "—á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ" in command.lower() and hasattr(message, 'reply_to_message') and message.reply_to_message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_info = bot.get_file(message.reply_to_message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        result = analyze_image(downloaded_file)
        bot.reply_to(message, result)

    elif "—Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ" in command.lower() and hasattr(message, 'reply_to_message') and message.reply_to_message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_info = bot.get_file(message.reply_to_message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        result = extract_text_from_image(downloaded_file)
        bot.reply_to(message, result)

    else:
        bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "- –∑–∞–ø—É—Å—Ç–∏ [–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ]\n" +
                    "- –∫—É—Ä—Å–æ—Ä [–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] [—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ]\n" +
                    "- —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n" +
                    "- –∫–ª–∞–≤–∏—à–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n" +
                    "- –Ω–∞–ø–∏—à–∏ [—Ç–µ–∫—Å—Ç]\n" +
                    "- —Å–∫—Ä–∏–Ω—à–æ—Ç\n" +
                    "- –∑–∞–∂–º–∏ [–∫–ª–∞–≤–∏—à–∞1] –Ω–∞–∂–º–∏ [–∫–ª–∞–≤–∏—à–∞2] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]\n" +
                    "- —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
                    "- bluetooth [–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|—Å—Ç–∞—Ç—É—Å]\n" +
                    "- –ø—Ä–æ—Ü–µ—Å—Å—ã\n" +
                    "- —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ\n" +
                    "- —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ\n" +
                    "–ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞ '–ê—Å—Ç—Ä–∏—Å' –¥–ª—è –æ–±—â–µ–Ω–∏—è")

@bot.message_handler(func=lambda message: message.content_type == 'text')  # –ò–∑–º–µ–Ω–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ
def handle_text(message):
    entered_password = message.text.strip()
    hashed_password = hashlib.sha256(entered_password.encode()).hexdigest()
    if check_password(message):
        user_id = message.from_user.id
        user_input = message.text.strip()
        if user_input and hashed_password != PASSWORD_HASH:
            response = generate_response(user_id, user_input)
            if user_input == 'üì± –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π':
                ListAppsForStart(message)
            elif user_input == 'üñ• –°–∫—Ä–∏–Ω—à–æ—Ç':
                SendSctFull(message)
            elif user_input == 'üñ± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–æ–º':
                handle_cursor_command(message)
            elif user_input == '‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞':
                Itxt(message)
            elif user_input == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã':
                send_system_stats(message)
            elif user_input == 'üì∂ Bluetooth':
                bluetooth_control(message)
            elif user_input == 'üìã –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã':
                show_running_processes(message)
            else:
                if flag == True:
                    if response:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                        bot.send_message(message.chat.id, response)
                    else:
                        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")
                else:
                    bot.send_message(message.chat.id, "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω.")

def get_size(bytes):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    """
    for unit in ['', 'K', 'M', 'G', 'T', 'P']:
        if bytes < 1024:
            return f"{bytes:.2f}{unit}B"
        bytes /= 1024

def get_system_stats():
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Å–∏—Å—Ç–µ–º–µ
    """
    try:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        uname = platform.uname()
        boot_time = datetime.fromtimestamp(psutil.boot_time())

        # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cpu_freq = psutil.cpu_freq()
        cpu_percent = psutil.cpu_percent(interval=1)

        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()

        # –î–∏—Å–∫–∏
        partitions = psutil.disk_partitions()
        disk_info = []
        for partition in partitions:
            try:
                partition_usage = psutil.disk_usage(partition.mountpoint)
                disk_info.append({
                    'device': partition.device,
                    'total': get_size(partition_usage.total),
                    'used': get_size(partition_usage.used),
                    'free': get_size(partition_usage.free),
                    'percent': partition_usage.percent
                })
            except:
                continue

        # –°–µ—Ç—å
        net_io = psutil.net_io_counters()

        stats = {
            "–ó–∞–≥—Ä—É–∑–∫–∞ CPU": f"{cpu_percent}%",
            "–ü–∞–º—è—Ç—å –≤—Å–µ–≥–æ": get_size(memory.total),
            "–ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ": f"{memory.percent}%",
            "–ü–∞–º—è—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ": get_size(memory.available),
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã": f"{datetime.now() - boot_time}",
            "–°–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": get_size(net_io.bytes_sent),
            "–°–µ—Ç—å –ø–æ–ª—É—á–µ–Ω–æ": get_size(net_io.bytes_recv),
            "–î–∏—Å–∫–∏": disk_info
        }

        return stats
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

@bot.message_handler(commands=['stats'])
def send_system_stats(message):
    if check_password(message):
        try:
            stats = get_system_stats()
            if isinstance(stats, dict):
                response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
                for key, value in stats.items():
                    if key != "–î–∏—Å–∫–∏":
                        response += f"üìå {key}: {value}\n"

                response += "\nüíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:\n"
                for disk in stats["–î–∏—Å–∫–∏"]:
                    response += f"\n–î–∏—Å–∫ {disk['device']}:\n"
                    response += f"–í—Å–µ–≥–æ: {disk['total']}\n"
                    response += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {disk['used']} ({disk['percent']}%)\n"
                    response += f"–°–≤–æ–±–æ–¥–Ω–æ: {disk['free']}\n"

                bot.reply_to(message, response)
            else:
                bot.reply_to(message, stats)
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

def toggle_bluetooth(turn_on=True):
    """
    –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç Bluetooth
    """
    try:
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è Bluetooth
        if turn_on:
            cmd = 'runas /user:Administrator "sc start bthserv"'
            powershell_cmd = 'Start-Process powershell -Verb RunAs -ArgumentList \'-Command "Enable-PnpDevice -InstanceId (Get-PnpDevice -Class Bluetooth).InstanceId -Confirm:$false"\''
        else:
            cmd = 'runas /user:Administrator "sc stop bthserv"'
            powershell_cmd = 'Start-Process powershell -Verb RunAs -ArgumentList \'-Command "Disable-PnpDevice -InstanceId (Get-PnpDevice -Class Bluetooth).InstanceId -Confirm:$false"\''

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
        subprocess.run(['powershell', '-Command', f'Start-Process cmd -Verb RunAs -ArgumentList \'/c {cmd}\''], shell=True)
        subprocess.run(['powershell', '-Command', powershell_cmd], shell=True)

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        time.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        status = get_bluetooth_status()
        if status is not None and status == turn_on:
            return True
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth"

    except Exception as e:
        return str(e)

def get_bluetooth_status():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Bluetooth
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
        cmd = 'Get-Service bthserv | Select-Object -ExpandProperty Status'
        result = subprocess.run(['powershell', '-Command', cmd],
                              capture_output=True,
                              text=True,
                              shell=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã
        return "Running" in result.stdout

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ Bluetooth: {e}")
        return None

@bot.message_handler(commands=['bluetooth'])
def bluetooth_control(message):
    if check_password(message):
        keyboard = InlineKeyboardMarkup()
        keyboard.row(
            InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å", callback_data="bluetooth_on"),
            InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="bluetooth_off")
        )
        keyboard.row(
            InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data="bluetooth_status")
        )

        bot.reply_to(message, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Bluetooth:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('bluetooth_'))
def callback_bluetooth(call):
    action = call.data.split('_')[1]
    if action == "status":
        status = get_bluetooth_status()
        if status is not None:
            status_text = "–≤–∫–ª—é—á–µ–Ω" if status else "–≤—ã–∫–ª—é—á–µ–Ω"
            bot.answer_callback_query(call.id, f"Bluetooth {status_text}")
        else:
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Bluetooth. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif action in ["on", "off"]:
        result = toggle_bluetooth(action == "on")
        if result is True:
            bot.answer_callback_query(call.id, f"Bluetooth —É—Å–ø–µ—à–Ω–æ {'–≤–∫–ª—é—á–µ–Ω' if action == 'on' else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        else:
            bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {result}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

def get_running_processes():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    """
    try:
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'memory_info', 'cpu_percent']):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                proc_info = proc.info
                if proc_info['name'] != 'System Idle Process':  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ç–æ—è
                    processes.append({
                        'name': proc_info['name'],
                        'pid': proc_info['pid'],
                        'memory': get_size(proc_info['memory_info'].rss),
                        'cpu': proc_info['cpu_percent']
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU
        processes.sort(key=lambda x: x['cpu'], reverse=True)
        return processes[:15]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-15 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {str(e)}"

@bot.message_handler(commands=['processes'])
def show_running_processes(message):
    if check_password(message):
        try:
            processes = get_running_processes()
            if isinstance(processes, list):
                response = "üñ• –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ø-15 –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ CPU):\n\n"
                for proc in processes:
                    response += f"üìå {proc['name']}\n"
                    response += f"   PID: {proc['pid']}\n"
                    response += f"   –ü–∞–º—è—Ç—å: {proc['memory']}\n"
                    response += f"   CPU: {proc['cpu']}%\n\n"

                bot.reply_to(message, response)
            else:
                bot.reply_to(message, processes)
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {str(e)}")

def analyze_image(image_data):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞ –Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = AutoImageProcessor.from_pretrained("microsoft/resnet-50")
        model = ResNetForImageClassification.from_pretrained("microsoft/resnet-50")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(image_data))

        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        inputs = processor(image, return_tensors="pt")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        with torch.no_grad():
            outputs = model(**inputs)
            predictions = outputs.logits.softmax(dim=-1)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        top_predictions = torch.topk(predictions[0], 5)

        response = "üñº –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —è –≤–∏–∂—É:\n\n"
        for score, idx in zip(top_predictions.values, top_predictions.indices):
            label = model.config.id2label[idx.item()]
            confidence = score.item() * 100
            response += f"üìå {label} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}%)\n"

        return response

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

def extract_text_from_image(image_data):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(image_data))

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É tesseract
        pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
        text = pytesseract.image_to_string(image, lang='rus+eng')

        if text.strip():
            response = "üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n"
            response += text
            return response
        else:
            return "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç–µ–∫—Å—Ç."

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}"

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    if user_id in authorized_users and authorized_users[user_id]:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
            file_info = bot.get_file(message.photo[-1].file_id)

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            downloaded_file = bot.download_file(file_info.file_path)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã", callback_data=f"photo_objects_{message.message_id}"),
                InlineKeyboardButton("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"photo_text_{message.message_id}")
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if not hasattr(bot, 'temp_photos'):
                bot.temp_photos = {}
            bot.temp_photos[message.message_id] = downloaded_file

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    else:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø–∞—Ä–æ–ª—å.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('photo_'))
def callback_photo(call):
    try:
        action, action_type, message_id = call.data.split('_')
        message_id = int(message_id)

        if not hasattr(bot, 'temp_photos') or message_id not in bot.temp_photos:
            bot.answer_callback_query(call.id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
            return

        image_data = bot.temp_photos[message_id]

        if action_type == 'objects':
            result = analyze_image(image_data)
        else:  # action_type == 'text'
            result = extract_text_from_image(image_data)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=result
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        del bot.temp_photos[message_id]

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

#___________________________________________________________________________________________________
#–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as _ex:
            print(_ex)
            time.sleep(15)
